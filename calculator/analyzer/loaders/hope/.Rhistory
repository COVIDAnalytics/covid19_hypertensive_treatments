View(time_to_switch)
time_to_switch <- treatment_disjoint %>%
filter(!is.na(regimen_length)) %>% # must have endpoint
filter(!(line == total_treatments & is.na(positive_response))) %>% # exclude if last treatment and no response
mutate(switched = if_else(line == total_treatments | coalesce(positive_response,0) == 1, 0, 1))
treatment_disjoint %>% filter(bcr_patient_barcode == "TCGA-5T-A9QA")
library(survival)
time_to_switch %>% group_by(drug_combination) %>% summarize(n())
time_to_switch %>% group_by(drug_combination) %>% summarize(Freq = n()) $>$ arrange(desc(Freq))
time_to_switch %>% group_by(drug_combination) %>% summarize(Freq = n()) %>% arrange(desc(Freq))
treatment_list <- c('Cyclophosphamide-Doxorubicin','Paclitaxel','Tamoxifen','Anastrozole')
treatment_list <- c('Cyclophosphamide-Doxorubicin','Paclitaxel','Tamoxifen','Anastrozole','Trastuzumab')
time_to_switch %>% filter(drug_combination %in% treatment_list) %>%
survfit(Surv(regimen_length, switched)~drug_combination, data = .)
fit <- time_to_switch %>% filter(drug_combination %in% treatment_list) %>%
survfit(Surv(regimen_length, switched)~drug_combination, data = .)
library(survminer)
df_sub <- time_to_switch %>% filter(drug_combination %in% treatment_list)
fit <- survfit(Surv(regimen_length, switched)~drug_combination, data = df_sub)
ggsurvplot(fit, data = df_sub, risk.table = TRUE)
ggsurvplot(fit, data = df_sub, risk.table = FALSE)
?ggsurvplot
conf.int
fit
fit$time
fit$strata
fit$strata[['names']]
ggsurvplot(fit, data = df_sub, risk.table = FALSE) +guides(fill=guide_legend(nrow=2,byrow=TRUE))
rownames(fit$strata)
names(fit$strata)
?grub
?gsub
ggsurvplot(fit, data = df_sub, risk.table = FALSE,
legend.title = "Regimen",
legend.labs = gsub("drug_combination=","",names(fit$strata)))
ggsurvplot(fit, data = df_sub, risk.table = FALSE,
legend.title = "Regimen",
legend.labs = gsub("drug_combination=","",names(fit$strata)),
risk.table.height = 0.5)
ggsurvplot(fit, data = df_sub, risk.table = TRUE,
legend.title = "Regimen",
legend.labs = gsub("drug_combination=","",names(fit$strata)),
risk.table.height = 0.5)
ggsurvplot(fit, data = df_sub, risk.table = FALSE,
legend.title = "Regimen",
legend.labs = gsub("drug_combination=","",names(fit$strata))) +
guides(colour = guide_legend(nrow = 2))
treatment_disjoint %>%
group_by(drug_combination) %>%
filter(!is.na(regimen_length)) %>%
summarize(Frequency = n(),
Responders = sum(positive_response==1, na.rm = TRUE),
NonResponders = sum(positive_response==0, na.rm = TRUE),
Distinct_Patients = n_distinct(bcr_patient_barcode),
MedianLength = median(regimen_length, na.rm  = TRUE),
AvgLine = mean(line)) %>%
arrange(desc(Frequency))
temp = treatment_disjoint %>%
group_by(drug_combination) %>%
filter(!is.na(regimen_length)) %>%
summarize(Frequency = n(),
Responders = sum(positive_response==1, na.rm = TRUE),
NonResponders = sum(positive_response==0, na.rm = TRUE),
Distinct_Patients = n_distinct(bcr_patient_barcode),
MedianLength = median(regimen_length, na.rm  = TRUE),
AvgLine = mean(line)) %>%
arrange(desc(Frequency))
View(temp)
write.csv(temp, "../processed-data/treatment_frequencies.csv", row.names = FALSE)
source('utils.R')
pt_timeline("TCGA-A2-A3XS")
pt_timeline("TCGA-A8-A06R")
pt_timeline("TCGA-4H-AAAK")
# Load TCGA ---------------------------------------------------------------
load_clinical(cohort)
cohort = "TCGA-BRCA"
# Load TCGA ---------------------------------------------------------------
load_clinical(cohort)
# Clean data --------------------------------------------------------------
drug <- drug %>%
unique() %>%
mutate(OldName = drug_name) %>%
left_join(drug_map, by = "OldName") %>%
mutate(drug_name = Correction_Clean) %>%
select(-Correction_Clean)
treatments <- drug %>%
select(bcr_patient_barcode, start_date = days_to_drug_therapy_start, end_date = days_to_drug_therapy_end,
therapy_types, drug_name, therapy_ongoing, measure_of_response) %>%
arrange(bcr_patient_barcode, drug_name) %>%
group_by_at(vars(-drug_name)) %>%
summarize(drug_combination = paste0(drug_name, collapse = "-")) %>%
# filter(measure_of_response!="") %>%
as.data.frame() %>%
mutate(positive_response = recode_response(measure_of_response),
regimen_length = end_date - start_date) %>%
select(bcr_patient_barcode, start_date, end_date, regimen_length, drug_combination,
measure_of_response, positive_response) %>%
arrange(bcr_patient_barcode, start_date) %>%
group_by(bcr_patient_barcode) %>%
mutate(line = row_number(),
total_treatments = n())
pt_timeline("TCGA-A2-A3XS")
View(patient)
table(treatments_disjoint$measure_of_response)
table(treatments_disjoint$drug_combination)
table(treatments_disjoint$drug_combination) %>% length()
table(drug$drug_name) %>% length()
setwd("~/Dropbox (MIT)/COVID_risk/covid19_calculator/calculator/analyzer/loaders/hope")
library(dplyr)
library(tidyverse)
library(foreign)
library(data.table)
library(reshape2)
library(caret)
library(designmatch)
library(dplyr)
library(purrr)
library(cobalt)
library(gurobi)
library(Hmisc)
# install.packages('/Library/gurobi902/mac64/R/gurobi_9.0-2_R_3.6.1.tgz', repos=NULL)
library(slam)
source("hope_data_cleaning.R")
source("matching_functions.R")
source("descriptive_functions.R")
data = read.csv(paste(save_path, "hope_data_clean_imputed.csv",sep=""), header = TRUE)
#Countries to include
groups = c("SPAIN")
treatments = c('CLOROQUINE','ANTIVIRAL','ANTICOAGULANTS','REGIMEN')
outcomes = c('DEATH','COMORB_DEATH')
#Filter the appropriate dataframe
df_full = data %>%filter(COUNTRY %in% groups)
df_other = data %>%filter(!(COUNTRY %in% groups))
#Keep the treatment as an independent vector
regimens_col = df_full%>%dplyr::select(REGIMEN)
#Select columns based on which the matching will take place
features_matching = c("AGE",
"GENDER",
"SAT02_BELOW92",
"FAST_BREATHING",
"CREATININE",
"ONSET_DATE_DIFF",
"LEUCOCYTES",
"HEMOGLOBIN",
"LYMPHOCYTES",
"PLATELETS",
"MAXTEMPERATURE_ADMISSION")
df<-df_full[,features_matching]
#One hot encode the dataset
dmy_out = dummyVars(" ~ .", data = df, drop2nd = TRUE, fullRank=T)
one_hot = predict(dmy_out, newdata = df)
# Split based on the treatments column
out <- split(data.frame(one_hot), f = regimens_col)
#We will pick as reference the treatment option that has the highest sample size
for (i in 1:length(out)){
print(paste("Treatment option ", names(out)[i], " has ", nrow(out[[i]]), " observations.", sep = ""))
}
#Base on that statement we will pick as treatment of reference:
# Chloroquine Only with 725 observations
base_treatment = 4
t = 1:5
to_match_treatments = t[-base_treatment]
n_base = nrow(out[[base_treatment]])
## Global variables for matching
# Solver options
t_max = 600
solver_option = "gurobi"
approximate = 0
matched_data =list()
referenced_data =list()
matched_object_list = list()
for (t in to_match_treatments){
# cycle through the different treatments which are each considered the "reference".
# base_treatment is always the treatment (that we are matching to)
match_output = matching_process(out, t, base_treatment, t_max, solver_option, approximate)
matched_object_list[[t]] = match_output
matched_data[[t]] = match_output$matched_data
referenced_data[[t]] =  match_output$reference_data
}
# control = "treatment", so these are the first indices in the matrix
common_control = 1:n_base
for (i in to_match_treatments) {
print(paste("Treatment option: ", names(out)[i], " (",i,")", sep = ""))
print(paste("The matched dataframe has now ", nrow(matched_data[[i]]), " from ", nrow(out[[i]]), " observations."), sep = "")
print(paste("The base dataframe has now ", nrow(referenced_data[[i]]), " from ", nrow(out[[base_treatment]]) , " observations"), sep = "")
print("")
control_inds = matched_object_list[[i]]$t_id
# common_control = intersect(common_control, control_inds)
# common_control = union(common_control, control_inds)
}
length(common_control)
library(dplyr)
library(tidyverse)
library(foreign)
library(data.table)
library(reshape2)
library(caret)
library(designmatch)
library(dplyr)
library(purrr)
library(cobalt)
library(gurobi)
library(Hmisc)
# install.packages('/Library/gurobi902/mac64/R/gurobi_9.0-2_R_3.6.1.tgz', repos=NULL)
library(slam)
source("hope_data_cleaning.R")
source("matching_functions.R")
source("descriptive_functions.R")
#Read in the data
data = read.csv(paste(save_path, "hope_data_clean_imputed.csv",sep=""), header = TRUE)
#Countries to include
groups = c("SPAIN")
save_path = "~/Dropbox (Personal)/COVID_clinical/covid19_hope/"
#Read in the data
data = read.csv(paste(save_path, "hope_data_clean_imputed.csv",sep=""), header = TRUE)
#Countries to include
groups = c("SPAIN")
treatments = c('CLOROQUINE','ANTIVIRAL','ANTICOAGULANTS','REGIMEN')
outcomes = c('DEATH','COMORB_DEATH')
#Filter the appropriate dataframe
df_full = data %>%filter(COUNTRY %in% groups)
df_other = data %>%filter(!(COUNTRY %in% groups))
#Keep the treatment as an independent vector
regimens_col = df_full%>%dplyr::select(REGIMEN)
save_path = "~/Dropbox (MIT)/COVID_risk/covid19_hope/"
#Read in the data
data = read.csv(paste(save_path, "hope_data_clean_imputed.csv",sep=""), header = TRUE)
#Countries to include
groups = c("SPAIN")
treatments = c('CLOROQUINE','ANTIVIRAL','ANTICOAGULANTS','REGIMEN')
outcomes = c('DEATH','COMORB_DEATH')
#Filter the appropriate dataframe
df_full = data %>%filter(COUNTRY %in% groups)
df_other = data %>%filter(!(COUNTRY %in% groups))
#Keep the treatment as an independent vector
regimens_col = df_full%>%dplyr::select(REGIMEN)
#Select columns based on which the matching will take place
features_matching = c("AGE",
"GENDER",
"SAT02_BELOW92",
"FAST_BREATHING",
"CREATININE",
"ONSET_DATE_DIFF",
"LEUCOCYTES",
"HEMOGLOBIN",
"LYMPHOCYTES",
"PLATELETS",
"MAXTEMPERATURE_ADMISSION")
df<-df_full[,features_matching]
#One hot encode the dataset
dmy_out = dummyVars(" ~ .", data = df, drop2nd = TRUE, fullRank=T)
one_hot = predict(dmy_out, newdata = df)
# Split based on the treatments column
out <- split(data.frame(one_hot), f = regimens_col)
#We will pick as reference the treatment option that has the highest sample size
for (i in 1:length(out)){
print(paste("Treatment option ", names(out)[i], " has ", nrow(out[[i]]), " observations.", sep = ""))
}
#Base on that statement we will pick as treatment of reference:
# Chloroquine Only with 725 observations
base_treatment = 4
t = 1:5
to_match_treatments = t[-base_treatment]
n_base = nrow(out[[base_treatment]])
## Global variables for matching
# Solver options
t_max = 600
solver_option = "gurobi"
approximate = 0
matched_data =list()
referenced_data =list()
matched_object_list = list()
for (t in to_match_treatments){
# cycle through the different treatments which are each considered the "reference".
# base_treatment is always the treatment (that we are matching to)
match_output = matching_process(out, t, base_treatment, t_max, solver_option, approximate)
matched_object_list[[t]] = match_output
matched_data[[t]] = match_output$matched_data
referenced_data[[t]] =  match_output$reference_data
}
# control = "treatment", so these are the first indices in the matrix
common_control = 1:n_base
for (i in to_match_treatments) {
print(paste("Treatment option: ", names(out)[i], " (",i,")", sep = ""))
print(paste("The matched dataframe has now ", nrow(matched_data[[i]]), " from ", nrow(out[[i]]), " observations."), sep = "")
print(paste("The base dataframe has now ", nrow(referenced_data[[i]]), " from ", nrow(out[[base_treatment]]) , " observations"), sep = "")
print("")
control_inds = matched_object_list[[i]]$t_id
# common_control = intersect(common_control, control_inds)
# common_control = union(common_control, control_inds)
}
length(common_control)
# Evaluate a single treatment ---------------------------------------------
vline = 0.15
#Select a treatment option to investigate
to_treat=4
t_inds = which(matched_object_list[[to_treat]]$t_ind == 1)
# The loveplot plots the absolute  differences in means
loveplot_common(names(out)[to_treat], #
matched_object_list[[to_treat]]$mdt0, # matrix
t_inds, # treatment indicators (original)
matched_object_list[[to_treat]]$t_id, #(treatment indicators - matched)
matched_object_list[[to_treat]]$c_id, #(control indicators - matched)
common_control, # common base treatment indices (common)
v_line=0.15)
matched_object_list[[to_treat]]$mdt0
#Base on that statement we will pick as treatment of reference:
# Chloroquine Only with 725 observations
base_treatment = 4
t = 1:5
to_match_treatments = t[-base_treatment]
n_base = nrow(out[[base_treatment]])
## Global variables for matching
# Solver options
t_max = 600
#Select a treatment option to investigate
to_treat=4
t_inds = which(matched_object_list[[to_treat]]$t_ind == 1)
matched_object_list[[to_treat]]$t_ind
library(dplyr)
library(tidyverse)
library(foreign)
library(data.table)
library(reshape2)
library(caret)
library(designmatch)
library(dplyr)
library(purrr)
library(cobalt)
library(gurobi)
library(Hmisc)
# install.packages('/Library/gurobi902/mac64/R/gurobi_9.0-2_R_3.6.1.tgz', repos=NULL)
library(slam)
source("hope_data_cleaning.R")
source("matching_functions.R")
source("descriptive_functions.R")
#Set the path
# save_path = "~/Dropbox (MIT)/COVID_risk/covid19_hope/"
# save_path = "~/Dropbox (Personal)/COVID_clinical/covid19_hope/"
#Read in the data
data = read.csv(paste(save_path, "hope_data_clean_imputed.csv",sep=""), header = TRUE)
#Countries to include
groups = c("SPAIN")
treatments = c('CLOROQUINE','ANTIVIRAL','ANTICOAGULANTS','REGIMEN')
outcomes = c('DEATH','COMORB_DEATH')
#Filter the appropriate dataframe
df_full = data %>%filter(COUNTRY %in% groups)
df_other = data %>%filter(!(COUNTRY %in% groups))
#Keep the treatment as an independent vector
regimens_col = df_full%>%dplyr::select(REGIMEN)
#Select columns based on which the matching will take place
features_matching = c("AGE",
"GENDER",
"SAT02_BELOW92",
"FAST_BREATHING",
"CREATININE",
"ONSET_DATE_DIFF",
"LEUCOCYTES",
"HEMOGLOBIN",
"LYMPHOCYTES",
"PLATELETS",
"MAXTEMPERATURE_ADMISSION")
library(dplyr)
library(tidyverse)
library(foreign)
library(data.table)
library(reshape2)
library(caret)
library(designmatch)
library(dplyr)
library(purrr)
library(cobalt)
library(gurobi)
library(Hmisc)
# install.packages('/Library/gurobi902/mac64/R/gurobi_9.0-2_R_3.6.1.tgz', repos=NULL)
library(slam)
source("hope_data_cleaning.R")
source("matching_functions.R")
source("descriptive_functions.R")
#Set the path
save_path = "~/Dropbox (MIT)/COVID_risk/covid19_hope/"
# save_path = "~/Dropbox (Personal)/COVID_clinical/covid19_hope/"
#Read in the data
data = read.csv(paste(save_path, "hope_data_clean_imputed.csv",sep=""), header = TRUE)
#Countries to include
groups = c("SPAIN")
treatments = c('CLOROQUINE','ANTIVIRAL','ANTICOAGULANTS','REGIMEN')
outcomes = c('DEATH','COMORB_DEATH')
#Filter the appropriate dataframe
df_full = data %>%filter(COUNTRY %in% groups)
df_other = data %>%filter(!(COUNTRY %in% groups))
#Keep the treatment as an independent vector
regimens_col = df_full%>%dplyr::select(REGIMEN)
#Select columns based on which the matching will take place
features_matching = c("AGE",
"GENDER",
"SAT02_BELOW92",
"FAST_BREATHING",
"CREATININE",
"ONSET_DATE_DIFF",
"LEUCOCYTES",
"HEMOGLOBIN",
"LYMPHOCYTES",
"PLATELETS",
"MAXTEMPERATURE_ADMISSION")
df<-df_full[,features_matching]
#One hot encode the dataset
dmy_out = dummyVars(" ~ .", data = df, drop2nd = TRUE, fullRank=T)
one_hot = predict(dmy_out, newdata = df)
# Split based on the treatments column
out <- split(data.frame(one_hot), f = regimens_col)
#We will pick as reference the treatment option that has the highest sample size
for (i in 1:length(out)){
print(paste("Treatment option ", names(out)[i], " has ", nrow(out[[i]]), " observations.", sep = ""))
}
#Base on that statement we will pick as treatment of reference:
# Chloroquine Only with 725 observations
base_treatment = 4
t = 1:5
to_match_treatments = t[-base_treatment]
n_base = nrow(out[[base_treatment]])
## Global variables for matching
# Solver options
t_max = 600
solver_option = "gurobi"
approximate = 0
matched_data =list()
referenced_data =list()
matched_object_list = list()
for (t in to_match_treatments){
# cycle through the different treatments which are each considered the "reference".
# base_treatment is always the treatment (that we are matching to)
match_output = matching_process(out, t, base_treatment, t_max, solver_option, approximate)
matched_object_list[[t]] = match_output
matched_data[[t]] = match_output$matched_data
referenced_data[[t]] =  match_output$reference_data
}
# control = "treatment", so these are the first indices in the matrix
common_control = 1:n_base
for (i in to_match_treatments) {
print(paste("Treatment option: ", names(out)[i], " (",i,")", sep = ""))
print(paste("The matched dataframe has now ", nrow(matched_data[[i]]), " from ", nrow(out[[i]]), " observations."), sep = "")
print(paste("The base dataframe has now ", nrow(referenced_data[[i]]), " from ", nrow(out[[base_treatment]]) , " observations"), sep = "")
print("")
control_inds = matched_object_list[[i]]$t_id
# common_control = intersect(common_control, control_inds)
# common_control = union(common_control, control_inds)
}
# Evaluate a single treatment ---------------------------------------------
vline = 0.15
#Select a treatment option to investigate
to_treat=4
t_inds = which(matched_object_list[[to_treat]]$t_ind == 1)
#Select a treatment option to investigate
to_treat=1
t_inds = which(matched_object_list[[to_treat]]$t_ind == 1)
# The loveplot plots the absolute  differences in means
loveplot_common(names(out)[to_treat], #
matched_object_list[[to_treat]]$mdt0, # matrix
t_inds, # treatment indicators (original)
matched_object_list[[to_treat]]$t_id, #(treatment indicators - matched)
matched_object_list[[to_treat]]$c_id, #(control indicators - matched)
common_control, # common base treatment indices (common)
v_line=0.15)
x = compare_features(df_full, base_treatment, to_treat, common_control = common_control)
ttest_original = x[['original']]
ttest_filtered = x[['filtered']]
ttest_compare = x[['compare']]
ttest_compare %>% arrange(P_Filtered) %>% head(10)
source("matching_functions.R")
# The loveplot plots the absolute  differences in means
loveplot_common(names(out)[to_treat], #
matched_object_list[[to_treat]]$mdt0, # matrix
t_inds, # treatment indicators (original)
matched_object_list[[to_treat]]$t_id, #(treatment indicators - matched)
matched_object_list[[to_treat]]$c_id, #(control indicators - matched)
common_control, # common base treatment indices (common)
v_line=0.15)
#Select a treatment option to investigate
to_treat=2
t_inds = which(matched_object_list[[to_treat]]$t_ind == 1)
# The loveplot plots the absolute  differences in means
loveplot_common(names(out)[to_treat], #
matched_object_list[[to_treat]]$mdt0, # matrix
t_inds, # treatment indicators (original)
matched_object_list[[to_treat]]$t_id, #(treatment indicators - matched)
matched_object_list[[to_treat]]$c_id, #(control indicators - matched)
common_control, # common base treatment indices (common)
v_line=0.15)
#Select a treatment option to investigate
to_treat=3
t_inds = which(matched_object_list[[to_treat]]$t_ind == 1)
# The loveplot plots the absolute  differences in means
loveplot_common(names(out)[to_treat], #
matched_object_list[[to_treat]]$mdt0, # matrix
t_inds, # treatment indicators (original)
matched_object_list[[to_treat]]$t_id, #(treatment indicators - matched)
matched_object_list[[to_treat]]$c_id, #(control indicators - matched)
common_control, # common base treatment indices (common)
v_line=0.15)
#Select a treatment option to investigate
to_treat=5
t_inds = which(matched_object_list[[to_treat]]$t_ind == 1)
# The loveplot plots the absolute  differences in means
loveplot_common(names(out)[to_treat], #
matched_object_list[[to_treat]]$mdt0, # matrix
t_inds, # treatment indicators (original)
matched_object_list[[to_treat]]$t_id, #(treatment indicators - matched)
matched_object_list[[to_treat]]$c_id, #(control indicators - matched)
common_control, # common base treatment indices (common)
v_line=0.15)
names(out)[4]
